import { debounce } from '../../../../public/common/function.js';
import { useSelectState } from '../hooks/use-select-state.js';
import { handleCtrlC } from '../../ui.js';
import React, { useRef, useCallback, forwardRef, useEffect } from 'react';
import { Box, useInput, Text } from 'ink';
import chalk from 'chalk';
import figures from 'figures';
import { createRequire } from 'module';
const require = createRequire(import.meta.url);
function highlightedLabel(label, term) {
    if (!term) {
        return label;
    }
    const regex = new RegExp(term, 'i');
    return label.replace(regex, (match) => {
        return chalk.bold(match);
    });
}
// eslint-disable-next-line react/function-component-definition
function Item({ item, previousItem, isSelected, highlightedTerm, enableShortcuts, items, hasAnyGroup, }) {
    const label = highlightedLabel(item.label, highlightedTerm);
    let title;
    let labelColor;
    if (isSelected) {
        labelColor = 'cyan';
    }
    else if (item.disabled) {
        labelColor = 'dim';
    }
    if (typeof previousItem === 'undefined' || item.group !== previousItem.group) {
        title = item.group ?? (hasAnyGroup ? 'Other' : undefined);
    }
    return (React.createElement(Box, { key: item.key, flexDirection: "column", marginTop: items.indexOf(item) !== 0 && title ? 1 : 0 },
        title ? (React.createElement(Box, { marginLeft: 3 },
            React.createElement(Text, { bold: true }, title))) : null,
        React.createElement(Box, { key: item.key },
            React.createElement(Box, { marginRight: 2 }, isSelected ? React.createElement(Text, { color: "cyan" }, `>`) : React.createElement(Text, null, " ")),
            React.createElement(Text, { color: labelColor }, enableShortcuts ? `(${item.key}) ${label}` : label))));
}
// eslint-disable-next-line react/function-component-definition
function SelectInputInner({ items: initialItems, onChange, enableShortcuts = true, focus = true, emptyMessage = 'No items to select.', defaultValue, highlightedTerm, loading = false, errorMessage, hasMorePages = false, morePagesMessage, infoMessage, limit, submitWithShortcuts = false, onSubmit, }, ref) {
    const sortBy = require('lodash/sortBy');
    const hasAnyGroup = initialItems.some((item) => typeof item.group !== 'undefined');
    const items = sortBy(initialItems, 'group');
    const itemsWithKeys = items.map((item, index) => ({
        ...item,
        key: item.key ?? (index + 1).toString(),
    }));
    const hasLimit = typeof limit !== 'undefined' && items.length > limit;
    const inputStack = useRef(null);
    const state = useSelectState({
        visibleOptionCount: limit,
        options: itemsWithKeys,
        defaultValue,
    });
    useEffect(() => {
        if (typeof state.value !== 'undefined' && state.previousValue !== state.value) {
            onChange?.(items.find((item) => item.value === state.value));
        }
    }, [state.previousValue, state.value, items, onChange]);
    const handleArrows = (key) => {
        if (key.upArrow) {
            state.selectPreviousOption();
        }
        else if (key.downArrow) {
            state.selectNextOption();
        }
    };
    const handleShortcuts = useCallback((input) => {
        if (state.visibleOptions.map((item) => item.key).includes(input)) {
            const itemWithKey = state.visibleOptions.find((item) => item.key === input);
            const item = items.find((item) => item.value === itemWithKey?.value);
            if (itemWithKey && !itemWithKey.disabled) {
                // keep this order of operations so that there is no flickering
                if (submitWithShortcuts && onSubmit && item) {
                    onSubmit(item);
                }
                state.selectOption({ option: itemWithKey });
            }
        }
    }, [items, onSubmit, state, submitWithShortcuts]);
    // disable exhaustive-deps because we want to memoize the debounce function itself
    // eslint-disable-next-line react-hooks/exhaustive-deps
    const debounceHandleShortcuts = useCallback(debounce((newInputStack) => {
        handleShortcuts(newInputStack);
        inputStack.current = null;
    }, 300), [handleShortcuts]);
    useInput((input, key) => {
        handleCtrlC(input, key);
        if (typeof state.value !== 'undefined' && key.return) {
            const item = items.find((item) => item.value === state.value);
            if (item && onSubmit) {
                onSubmit(item);
            }
        }
        // check that no special modifier (shift, control, etc.) is being pressed
        if (enableShortcuts && input.length > 0 && Object.values(key).every((value) => value === false)) {
            const newInputStack = inputStack.current === null ? input : inputStack.current + input;
            inputStack.current = newInputStack;
            debounceHandleShortcuts(newInputStack);
        }
        else {
            debounceHandleShortcuts.cancel();
            inputStack.current = null;
            handleArrows(key);
        }
    }, { isActive: focus });
    if (loading) {
        return (React.createElement(Box, { marginLeft: 3 },
            React.createElement(Text, { dimColor: true }, "Loading...")));
    }
    else if (errorMessage && errorMessage.length > 0) {
        return (React.createElement(Box, { marginLeft: 3 },
            React.createElement(Text, { color: "red" }, errorMessage)));
    }
    else if (items.length === 0) {
        return (React.createElement(Box, { marginLeft: 3 },
            React.createElement(Text, { dimColor: true }, emptyMessage)));
    }
    else {
        return (React.createElement(Box, { flexDirection: "column", ref: ref },
            state.visibleOptions.map((item, index) => (React.createElement(Item, { key: item.key, item: item, previousItem: state.visibleOptions[index - 1], highlightedTerm: highlightedTerm, isSelected: item.value === state.value, items: state.visibleOptions, enableShortcuts: enableShortcuts, hasAnyGroup: hasAnyGroup }))),
            React.createElement(Box, { marginTop: 1, marginLeft: 3, flexDirection: "column" },
                hasMorePages ? (React.createElement(Text, null,
                    React.createElement(Text, { bold: true },
                        "1-",
                        items.length,
                        " of many"),
                    morePagesMessage ? `  ${morePagesMessage}` : null)) : null,
                hasLimit ? React.createElement(Text, { dimColor: true }, `Showing ${limit} of ${items.length} items.`) : null,
                React.createElement(Text, { dimColor: true }, infoMessage
                    ? infoMessage
                    : `Press ${figures.arrowUp}${figures.arrowDown} arrows to select, enter to confirm`))));
    }
}
export const SelectInput = forwardRef(SelectInputInner);
//# sourceMappingURL=SelectInput.js.map