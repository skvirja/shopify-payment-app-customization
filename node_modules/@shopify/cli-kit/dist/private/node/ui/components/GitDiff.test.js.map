{"version":3,"file":"GitDiff.test.js","sourceRoot":"","sources":["../../../../../src/private/node/ui/components/GitDiff.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import {GitDiff} from './GitDiff.js'\nimport {render} from '../../testing/ui.js'\nimport {unstyled} from '../../../../public/node/output.js'\nimport {afterEach, describe, expect, test, vi} from 'vitest'\nimport React from 'react'\n\nafterEach(async () => {\n  await vi.unstubAllGlobals()\n})\n\ndescribe('GitDiff', async () => {\n  test('renders correctly when no changes exist', async () => {\n    const {lastFrame} = render(<GitDiff baselineContent=\"hello\" updatedContent=\"hello\" />)\n\n    expect(lastFrame()).toEqual('No changes.')\n  })\n\n  test('renders correctly when changes exist', async () => {\n    const {lastFrame} = render(<GitDiff baselineContent=\"hello\\n\" updatedContent=\"world\\n\" />)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"  @@ -1 +1 @@\n      - hello\n      + world\"\n    `)\n  })\n\n  test('renders correctly when changes exist and are several lines long', async () => {\n    const {lastFrame} = render(<GitDiff baselineContent=\"hello\\nworld\\n\" updatedContent=\"world\\nhello\\n\" />)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"  @@ -1,2 +1,2 @@\n      - hello\n        world\n      + hello\"\n    `)\n  })\n\n  test('displays color correctly', async () => {\n    const {lastFrame} = render(<GitDiff baselineContent=\"hello\\nworld\\n\" updatedContent=\"world\\nhello\\n\" />)\n\n    expect(lastFrame()).toMatchInlineSnapshot(`\n      \"\\u001b[36m  @@ -1,2 +1,2 @@\\u001b[m\n      \\u001b[31m- hello\\u001b[m\n        world\\u001b[m\n      \\u001b[32m+ \\u001b[m\\u001b[32mhello\\u001b[m\"\n    `)\n  })\n\n  test('respects no-color mode', async () => {\n    vi.stubGlobal('process', {...process, env: {...process.env, FORCE_COLOR: '0'}})\n    const {lastFrame} = render(<GitDiff baselineContent=\"hello\\nworld\\n\" updatedContent=\"world\\nhello\\n\" />)\n\n    expect(lastFrame()!).toMatchInlineSnapshot(`\n      \"  @@ -1,2 +1,2 @@\n      - hello\n        world\n      + hello\"\n    `)\n  })\n\n  test('ignores newline changes', async () => {\n    const expectedDiff = `\n      \"  @@ -1,2 +1,2 @@\n      - hello\n        world\n      + hello\"\n    `\n    // Removing a newline\n\n    const {lastFrame} = render(<GitDiff baselineContent=\"hello\\nworld\\n\" updatedContent=\"world\\nhello\" />)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(expectedDiff)\n\n    const lastFrame2 = render(<GitDiff baselineContent=\"hello\\nworld\\n\" updatedContent=\"world\\nhello\" />).lastFrame\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(expectedDiff)\n  })\n\n  test('renders correctly when changes exist in multiple areas of a file', async () => {\n    const baselineContent = `hello\nworld\nlorem\nipsum\ndolor\nsit\namet\nfoo\nbar\n`\n    const updatedContent = `world\nhello\nlorem\nipsum\ndolor\nsit\namet\nfoo\nqux`\n    const {lastFrame} = render(<GitDiff baselineContent={baselineContent} updatedContent={updatedContent} />)\n\n    expect(unstyled(lastFrame()!)).toMatchInlineSnapshot(`\n      \"  @@ -1,3 +1,3 @@\n      - hello\n        world\n      + hello\n        lorem\n\n        @@ -8,2 +8,2 @@ amet\n        foo\n      - bar\n      + qux\"`)\n  })\n})\n"]}