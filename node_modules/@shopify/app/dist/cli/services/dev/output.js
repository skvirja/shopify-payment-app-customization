import { partnersFqdn } from '@shopify/cli-kit/node/context/fqdn';
import { renderConcurrent, renderInfo } from '@shopify/cli-kit/node/ui';
import { outputInfo } from '@shopify/cli-kit/node/output';
import { openURL } from '@shopify/cli-kit/node/system';
export async function outputUpdateURLsResult(updated, urls, app) {
    const dashboardURL = await partnersURL(app.organizationId, app.id);
    if (app.newApp) {
        renderInfo({
            headline: `For your convenience, we've given your app a default URL: ${urls.applicationUrl}.`,
            body: [
                "You can update your app's URL anytime in the",
                dashboardURL,
                'But once your app is live, updating its URL will disrupt user access.',
            ],
        });
    }
    else if (!updated) {
        renderInfo({
            body: [
                'To make URL updates manually, you can add the following URLs as redirects in your',
                dashboardURL,
                { char: ':' },
                '\n\n',
                { list: { items: urls.redirectUrlWhitelist } },
            ],
        });
    }
}
export function outputExtensionsMessages(app) {
    outputThemeExtensionsMessage(app.allExtensions.filter((ext) => ext.isThemeExtension));
}
export function renderDev(renderConcurrentOptions, previewUrl) {
    let options = renderConcurrentOptions;
    if (previewUrl) {
        options = {
            ...options,
            onInput: (input, _key, exit) => {
                if (input === 'p' && previewUrl) {
                    // eslint-disable-next-line @typescript-eslint/no-floating-promises
                    openURL(previewUrl);
                }
                else if (input === 'q') {
                    exit();
                }
            },
            footer: {
                shortcuts: [
                    {
                        key: 'p',
                        action: 'preview in your browser',
                    },
                    {
                        key: 'q',
                        action: 'quit',
                    },
                ],
                subTitle: `Preview URL: ${previewUrl}`,
            },
        };
    }
    return renderConcurrent(options);
}
function outputThemeExtensionsMessage(extensions) {
    if (extensions.length === 0)
        return;
    for (const extension of extensions) {
        const message = extension.previewMessage('', '');
        if (message)
            outputInfo(message);
    }
}
async function partnersURL(organizationId, appId) {
    return {
        link: {
            label: 'Partners Dashboard',
            url: `https://${await partnersFqdn()}/${organizationId}/apps/${appId}/edit`,
        },
    };
}
//# sourceMappingURL=output.js.map