{"version":3,"file":"update-extension.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/update-extension.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,4BAA4B,GAE7B,MAAM,mCAAmC,CAAA;AAC1C,OAAO,EAAC,0BAA0B,EAAE,sBAAsB,EAAC,MAAM,4BAA4B,CAAA;AAG7F,OAAO,EAAC,eAAe,EAAC,MAAM,oCAAoC,CAAA;AAClE,OAAO,EAAC,UAAU,EAAC,MAAM,6BAA6B,CAAA;AACtD,OAAO,EAAC,QAAQ,EAAC,MAAM,0BAA0B,CAAA;AACjD,OAAO,EAAgB,UAAU,EAAC,MAAM,8BAA8B,CAAA;AAatE,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,EACzC,SAAS,EACT,KAAK,EACL,MAAM,EACN,cAAc,EACd,MAAM,EACN,MAAM,EACN,iBAAiB,GACW;IAC5B,IAAI,WAA+B,CAAA;IACnC,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;QAC1C,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;QACpD,IAAI,CAAC,OAAO;YAAE,OAAM;QACpB,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;KACtD;IAED,MAAM,cAAc,GAA8B;QAChD,MAAM;QACN,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC;YACrB,GAAG,CAAC,MAAM,SAAS,CAAC,YAAY,CAAC,EAAC,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAC,CAAC,CAAC;YACrE,iBAAiB,EAAE,WAAW;SAC/B,CAAC;QACF,OAAO,EAAE,SAAS;QAClB,cAAc;KACf,CAAA;IACD,MAAM,QAAQ,GAAG,4BAA4B,CAAA;IAE7C,MAAM,cAAc,GAA0B,MAAM,eAAe,CAAC,QAAQ,EAAE,KAAK,EAAE,cAAc,CAAC,CAAA;IACpG,IAAI,cAAc,CAAC,oBAAoB,EAAE,UAAU,EAAE,MAAM,GAAG,CAAC,EAAE;QAC/D,MAAM,MAAM,GAAG,cAAc,CAAC,oBAAoB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACtG,MAAM,CAAC,KAAK,CAAC,gCAAgC,MAAM,EAAE,CAAC,CAAA;KACvD;SAAM;QACL,UAAU,CAAC,6CAA6C,SAAS,CAAC,eAAe,EAAE,EAAE,MAAM,CAAC,CAAA;KAC7F;AACH,CAAC;AAaD,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,EAC1C,SAAS,EACT,KAAK,EACL,MAAM,EACN,cAAc,EACd,MAAM,EACN,MAAM,EACN,cAAc,EACd,iBAAiB,GACY;IAC7B,MAAM,KAAK,GAAG,CAAC,YAA2B,EAAE,EAAE;QAC5C,MAAM,IAAI,UAAU,CAAC,YAAY,CAAC,CAAA;IACpC,CAAC,CAAA;IAED,MAAM,aAAa,GAAG,MAAM,0BAA0B,CAAC,cAAc,EAAE,SAAS,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;IAE1G,IAAI,CAAC,aAAa,EAAE;QAClB,OAAM;KACP;IAED,MAAM,aAAa,GAAG,MAAM,sBAAsB,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;IAC5G,kDAAkD;IAClD,SAAS,CAAC,aAAa,GAAG,aAAa,CAAA;IACvC,OAAO,oBAAoB,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,EAAE,iBAAiB,EAAC,CAAC,CAAA;AAC5G,CAAC","sourcesContent":["import {\n  ExtensionUpdateDraftInput,\n  ExtensionUpdateDraftMutation,\n  ExtensionUpdateSchema,\n} from '../../api/graphql/update_draft.js'\nimport {findSpecificationForConfig, parseConfigurationFile} from '../../models/app/loader.js'\nimport {ExtensionInstance} from '../../models/extensions/extension-instance.js'\nimport {ExtensionSpecification} from '../../models/extensions/specification.js'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {readFile} from '@shopify/cli-kit/node/fs'\nimport {OutputMessage, outputInfo} from '@shopify/cli-kit/node/output'\nimport {Writable} from 'stream'\n\ninterface UpdateExtensionDraftOptions {\n  extension: ExtensionInstance\n  token: string\n  apiKey: string\n  registrationId: string\n  stdout: Writable\n  stderr: Writable\n  unifiedDeployment: boolean\n}\n\nexport async function updateExtensionDraft({\n  extension,\n  token,\n  apiKey,\n  registrationId,\n  stdout,\n  stderr,\n  unifiedDeployment,\n}: UpdateExtensionDraftOptions) {\n  let encodedFile: string | undefined\n  if (extension.features.includes('esbuild')) {\n    const content = await readFile(extension.outputPath)\n    if (!content) return\n    encodedFile = Buffer.from(content).toString('base64')\n  }\n\n  const extensionInput: ExtensionUpdateDraftInput = {\n    apiKey,\n    config: JSON.stringify({\n      ...(await extension.deployConfig({apiKey, token, unifiedDeployment})),\n      serialized_script: encodedFile,\n    }),\n    context: undefined,\n    registrationId,\n  }\n  const mutation = ExtensionUpdateDraftMutation\n\n  const mutationResult: ExtensionUpdateSchema = await partnersRequest(mutation, token, extensionInput)\n  if (mutationResult.extensionUpdateDraft?.userErrors?.length > 0) {\n    const errors = mutationResult.extensionUpdateDraft.userErrors.map((error) => error.message).join(', ')\n    stderr.write(`Error while updating drafts: ${errors}`)\n  } else {\n    outputInfo(`Draft updated successfully for extension: ${extension.localIdentifier}`, stdout)\n  }\n}\n\ninterface UpdateExtensionConfigOptions {\n  extension: ExtensionInstance\n  token: string\n  apiKey: string\n  registrationId: string\n  stdout: Writable\n  stderr: Writable\n  specifications: ExtensionSpecification[]\n  unifiedDeployment: boolean\n}\n\nexport async function updateExtensionConfig({\n  extension,\n  token,\n  apiKey,\n  registrationId,\n  stdout,\n  stderr,\n  specifications,\n  unifiedDeployment,\n}: UpdateExtensionConfigOptions) {\n  const abort = (errorMessage: OutputMessage) => {\n    throw new AbortError(errorMessage)\n  }\n\n  const specification = await findSpecificationForConfig(specifications, extension.configurationPath, abort)\n\n  if (!specification) {\n    return\n  }\n\n  const configuration = await parseConfigurationFile(specification.schema, extension.configurationPath, abort)\n  // eslint-disable-next-line require-atomic-updates\n  extension.configuration = configuration\n  return updateExtensionDraft({extension, token, apiKey, registrationId, stdout, stderr, unifiedDeployment})\n}\n"]}