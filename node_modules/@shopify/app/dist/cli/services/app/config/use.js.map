{"version":3,"file":"use.js","sourceRoot":"","sources":["../../../../../src/cli/services/app/config/use.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,2BAA2B,EAAE,IAAI,IAAI,OAAO,EAAC,MAAM,+BAA+B,CAAA;AAC1F,OAAO,EAAC,sBAAsB,EAAE,UAAU,EAAC,MAAM,wBAAwB,CAAA;AACzE,OAAO,EAAC,gBAAgB,EAAC,MAAM,4BAA4B,CAAA;AAC3D,OAAO,EAAC,UAAU,EAAC,MAAM,6BAA6B,CAAA;AACtD,OAAO,EAAC,UAAU,EAAC,MAAM,0BAA0B,CAAA;AACnD,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAA;AACnD,OAAO,EAAC,aAAa,EAAC,MAAM,0BAA0B,CAAA;AACtD,OAAO,EAAS,GAAG,EAAE,EAAE,EAAC,MAAM,8BAA8B,CAAA;AAQ5D,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,GAAG,CAAC,EAAC,SAAS,EAAE,MAAM,EAAE,KAAK,GAAG,KAAK,EAAa;IAC9E,IAAI,KAAK,EAAE;QACT,sBAAsB,CAAC,SAAS,CAAC,CAAA;QACjC,aAAa,CAAC;YACZ,QAAQ,EAAE,gCAAgC;YAC1C,IAAI,EAAE,CAAC,+FAA+F,CAAC;SACxG,CAAC,CAAA;QACF,OAAM;KACP;IAED,MAAM,cAAc,GAAG,CAAC,MAAM,iBAAiB,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,YAAY,EAAE,CAAA;IAElF,MAAM,iBAAiB,CAAC,EAAC,cAAc,EAAE,SAAS,EAAC,CAAC,CAAA;IAEpD,aAAa,CAAC;QACZ,QAAQ,EAAE,4BAA4B,cAAc,EAAE;KACvD,CAAC,CAAA;AACJ,CAAC;AAOD,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,EAAC,cAAc,EAAE,SAAS,EAA2B;IAC3F,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,EAAC,cAAc,EAAE,EAAE,EAAE,UAAU,EAAE,cAAc,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAA;IAEtG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,EAAE;QAChC,MAAM,IAAI,UAAU,CAAC,sBAAsB,cAAc,qBAAqB,CAAC,CAAA;KAChF;IAED,UAAU,CAAC;QACT,SAAS;QACT,UAAU,EAAE,cAAc;KAC3B,CAAC,CAAA;AACJ,CAAC;AAED,KAAK,UAAU,iBAAiB,CAAC,SAAiB,EAAE,MAAe;IACjE,IAAI,MAAM,EAAE;QACV,MAAM,UAAU,GAAG,2BAA2B,CAAC,MAAM,CAAC,CAAA;QACtD,IAAI,MAAM,UAAU,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC,EAAE;YACrD,OAAO,EAAE,CAAC,UAAU,CAAC,CAAA;SACtB;aAAM;YACL,OAAO,GAAG,CAAC,qCAAqC,UAAU,EAAE,CAAC,CAAA;SAC9D;KACF;IACD,OAAO,gBAAgB,CAAC,SAAS,CAAC,CAAA;AACpC,CAAC","sourcesContent":["import {getAppConfigurationFileName, load as loadApp} from '../../../models/app/loader.js'\nimport {clearCurrentConfigFile, setAppInfo} from '../../local-storage.js'\nimport {selectConfigFile} from '../../../prompts/config.js'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {fileExists} from '@shopify/cli-kit/node/fs'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {renderSuccess} from '@shopify/cli-kit/node/ui'\nimport {Result, err, ok} from '@shopify/cli-kit/node/result'\n\nexport interface UseOptions {\n  directory: string\n  config?: string\n  reset?: boolean\n}\n\nexport default async function use({directory, config, reset = false}: UseOptions): Promise<void> {\n  if (reset) {\n    clearCurrentConfigFile(directory)\n    renderSuccess({\n      headline: 'Cleared current configuration.',\n      body: ['In order to set a new current configuration, please run `shopify app config use CONFIG_NAME`.'],\n    })\n    return\n  }\n\n  const configFileName = (await getConfigFileName(directory, config)).valueOrAbort()\n\n  await saveCurrentConfig({configFileName, directory})\n\n  renderSuccess({\n    headline: `Using configuration file ${configFileName}`,\n  })\n}\n\ninterface SaveCurrentConfigOptions {\n  configFileName: string\n  directory: string\n}\n\nexport async function saveCurrentConfig({configFileName, directory}: SaveCurrentConfigOptions) {\n  const app = await loadApp({specifications: [], configName: configFileName, directory, mode: 'strict'})\n\n  if (!app.configuration.client_id) {\n    throw new AbortError(`Configuration file ${configFileName} needs a client_id.`)\n  }\n\n  setAppInfo({\n    directory,\n    configFile: configFileName,\n  })\n}\n\nasync function getConfigFileName(directory: string, config?: string): Promise<Result<string, string>> {\n  if (config) {\n    const configFile = getAppConfigurationFileName(config)\n    if (await fileExists(joinPath(directory, configFile))) {\n      return ok(configFile)\n    } else {\n      return err(`Could not find configuration file ${configFile}`)\n    }\n  }\n  return selectConfigFile(directory)\n}\n"]}