{"version":3,"file":"push.js","sourceRoot":"","sources":["../../../../../src/cli/services/app/config/push.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAmB,MAAM,qCAAqC,CAAA;AAEhF,OAAO,EAAC,2BAA2B,EAAC,MAAM,+BAA+B,CAAA;AACzE,OAAO,EAAC,eAAe,EAAC,MAAM,oCAAoC,CAAA;AAClE,OAAO,EAAC,UAAU,EAAC,MAAM,6BAA6B,CAAA;AACtD,OAAO,EAAC,aAAa,EAAC,MAAM,0BAA0B,CAAA;AAEtD,OAAO,EAAC,QAAQ,EAAC,MAAM,4BAA4B,CAAA;AAMnD,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,OAAgB;IAC/C,MAAM,KAAK,GAAG,MAAM,2BAA2B,EAAE,CAAA;IACjD,MAAM,QAAQ,GAAG,UAAU,CAAA;IAE3B,MAAM,EAAC,aAAa,EAAC,GAAG,OAAO,CAAC,GAAG,CAAA;IACnC,MAAM,cAAc,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;IAE9D,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE;QAC5B,KAAK,CAAC,GAAG,cAAc,gCAAgC,CAAC,CAAA;KACzD;IACD,MAAM,gBAAgB,GAAG;QACvB,MAAM,EAAE,aAAa,CAAC,SAAS;QAC/B,KAAK,EAAE,aAAa,CAAC,IAAI;QACzB,cAAc,EAAE,aAAa,CAAC,eAAe;QAC7C,oBAAoB,EAAE,aAAa,CAAC,sBAAsB;QAC1D,qBAAqB,EAAE,aAAa,CAAC,uBAAuB;KAC7D,CAAA;IAED,MAAM,SAAS,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,CAAA;IAEtD,MAAM,MAAM,GAAqB,MAAM,eAAe,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC,CAAA;IAElF,IAAI,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1C,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACnF,KAAK,CAAC,MAAM,CAAC,CAAA;KACd;IAED,aAAa,CAAC;QACZ,QAAQ,EAAE,iCAAiC,aAAa,CAAC,IAAI,EAAE;QAC/D,IAAI,EAAE,CAAC,GAAG,cAAc,wCAAwC,CAAC;KAClE,CAAC,CAAA;AACJ,CAAC;AAED,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,YAA2B,EAAE,EAAE;IACnD,MAAM,IAAI,UAAU,CAAC,YAAY,CAAC,CAAA;AACpC,CAAC,CAAA;AAED,kEAAkE;AAClE,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAmD,EAAE,EAAE;IACxF,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,GAAmD,EAAE,GAAG,EAAE,EAAE;QAC1F,IAAI,GAAG,CAAC,GAAG,CAAC,EAAE;YACZ,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAA;SACpB;QACD,OAAO,GAAG,CAAA;IACZ,CAAC,EAAE,EAAE,CAAC,CAAA;AACR,CAAC,CAAA","sourcesContent":["import {PushConfig, PushConfigSchema} from '../../../api/graphql/push_config.js'\nimport {AppInterface} from '../../../models/app/app.js'\nimport {ensureAuthenticatedPartners} from '@shopify/cli-kit/node/session'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {renderSuccess} from '@shopify/cli-kit/node/ui'\nimport {OutputMessage} from '@shopify/cli-kit/node/output'\nimport {basename} from '@shopify/cli-kit/node/path'\n\nexport interface Options {\n  app: AppInterface\n}\n\nexport async function pushConfig(options: Options) {\n  const token = await ensureAuthenticatedPartners()\n  const mutation = PushConfig\n\n  const {configuration} = options.app\n  const configFileName = basename(options.app.configurationPath)\n\n  if (!configuration.client_id) {\n    abort(`${configFileName} does not contain a client_id.`)\n  }\n  const initialVariables = {\n    apiKey: configuration.client_id,\n    title: configuration.name,\n    applicationUrl: configuration.application_url,\n    redirectUrlAllowlist: configuration.redirect_url_allowlist,\n    requestedAccessScopes: configuration.requested_access_scopes,\n  }\n\n  const variables = removeFalsyEntries(initialVariables)\n\n  const result: PushConfigSchema = await partnersRequest(mutation, token, variables)\n\n  if (result.appUpdate.userErrors.length > 0) {\n    const errors = result.appUpdate.userErrors.map((error) => error.message).join(', ')\n    abort(errors)\n  }\n\n  renderSuccess({\n    headline: `Updated app configuration for ${configuration.name}`,\n    body: [`${configFileName} configuration is now live on Shopify.`],\n  })\n}\n\nexport const abort = (errorMessage: OutputMessage) => {\n  throw new AbortError(errorMessage)\n}\n\n// this is placeholder for a more robust validation/clearing layer\nexport const removeFalsyEntries = (obj: {[key: string]: string | string[] | undefined}) => {\n  return Object.keys(obj).reduce((acc: {[key: string]: string | string[] | undefined}, key) => {\n    if (obj[key]) {\n      acc[key] = obj[key]\n    }\n    return acc\n  }, {})\n}\n"]}