{"version":3,"file":"prompts.js","sourceRoot":"","sources":["../../../../src/cli/services/context/prompts.ts"],"names":[],"mappings":"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","sourcesContent":["import {LocalSource, RemoteSource} from './identifiers.js'\nimport {LocalRemoteSource} from './id-matching.js'\nimport {IdentifiersExtensions} from '../../models/app/identifiers.js'\nimport {OrganizationApp} from '../../models/organization.js'\nimport {\n  InfoTableSection,\n  renderAutocompletePrompt,\n  renderConfirmationPrompt,\n  renderInfo,\n} from '@shopify/cli-kit/node/ui'\n\nexport async function matchConfirmationPrompt(local: LocalSource, remote: RemoteSource) {\n  return renderConfirmationPrompt({\n    message: `Match ${local.configuration.name} (local name) with ${remote.title} (name on Shopify Partners, ID: ${remote.id})?`,\n    confirmationMessage: `Yes, that's right`,\n    cancellationMessage: `No, cancel`,\n  })\n}\n\nexport async function selectRemoteSourcePrompt(\n  localSource: LocalSource,\n  remoteSourcesOfSameType: RemoteSource[],\n  remoteIdField: 'id' | 'uuid',\n): Promise<RemoteSource> {\n  const remoteOptions = remoteSourcesOfSameType.map((remote) => ({\n    label: `Match it to ${remote.title} (ID: ${remote.id} on Shopify Partners)`,\n    value: remote[remoteIdField],\n  }))\n  remoteOptions.push({label: 'Create new extension', value: 'create'})\n  const uuid = await renderAutocompletePrompt({\n    message: `How would you like to deploy your \"${localSource.configuration.name}\"?`,\n    choices: remoteOptions,\n  })\n  return remoteSourcesOfSameType.find((remote) => remote[remoteIdField] === uuid)!\n}\n\ninterface SourceSummary {\n  question: string\n  identifiers: IdentifiersExtensions\n  toCreate: LocalSource[]\n  onlyRemote: RemoteSource[]\n  dashboardOnly: RemoteSource[]\n}\n\nexport async function deployConfirmationPrompt(\n  {question, identifiers, toCreate, onlyRemote, dashboardOnly}: SourceSummary,\n  partnersApp?: Pick<OrganizationApp, 'betas'>,\n): Promise<boolean> {\n  const infoTable: InfoTableSection[] = []\n\n  if (toCreate.length > 0) {\n    infoTable.push({header: 'Add', items: toCreate.map((source) => source.localIdentifier)})\n  }\n\n  const toUpdate = Object.keys(identifiers)\n\n  if (toUpdate.length > 0) {\n    infoTable.push({header: 'Update', items: toUpdate})\n  }\n\n  if (dashboardOnly.length > 0) {\n    infoTable.push({header: 'Included from\\nPartner dashboard', items: dashboardOnly.map((source) => source.title)})\n  }\n\n  if (onlyRemote.length > 0) {\n    let missingLocallySection: InfoTableSection = {\n      header: 'Missing locally',\n      items: onlyRemote.map((source) => source.title),\n    }\n\n    if (partnersApp?.betas?.unifiedAppDeployment) {\n      missingLocallySection = {\n        ...missingLocallySection,\n        color: 'red',\n        helperText: 'Extensions missing locally will be removed for users when you publish this deployment',\n      }\n    }\n\n    infoTable.push(missingLocallySection)\n  }\n\n  if (Object.keys(infoTable).length === 0) {\n    return new Promise((resolve) => resolve(true))\n  }\n\n  return renderConfirmationPrompt({\n    message: question,\n    infoTable,\n    confirmationMessage: 'Yes, deploy to push changes',\n    cancellationMessage: 'No, cancel',\n  })\n}\n\nexport async function extensionMigrationPrompt(toMigrate: LocalRemoteSource[]): Promise<boolean> {\n  const migrationNames = toMigrate.map(({local}) => local.configuration.name).join(',')\n  const allMigrationTypes = toMigrate.map(({remote}) => remote.type.toLocaleLowerCase())\n  const uniqueMigrationTypes = allMigrationTypes.filter((type, i) => allMigrationTypes.indexOf(type) === i).join(',')\n\n  renderInfo({\n    headline: \"Extension migrations can't be undone.\",\n    body: `Your ${migrationNames} configuration has been updated. Migrating gives you access to new features and won't impact the end user experience. All previous extension versions will reflect this change.`,\n  })\n\n  return renderConfirmationPrompt({\n    message: `Migrate ${migrationNames}?`,\n    confirmationMessage: `Yes, confirm migration from ${uniqueMigrationTypes}`,\n    cancellationMessage: 'No, cancel',\n  })\n}\n"]}