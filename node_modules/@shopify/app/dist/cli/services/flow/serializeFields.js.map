{"version":3,"file":"serializeFields.js","sourceRoot":"","sources":["../../../../src/cli/services/flow/serializeFields.ts"],"names":[],"mappings":"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","sourcesContent":["import {ConfigField, SerializedField, FlowExtensionTypes} from './types.js'\nimport {\n  SUPPORTED_COMMERCE_OBJECTS,\n  ACTION_SUPPORTED_COMMERCE_OBJECTS,\n  TRIGGER_SUPPORTED_COMMERCE_OBJECTS,\n} from './constants.js'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\n// Mapping of metafield types to Flow's Partner's Dashboard UI types\n// Only the `email` type was added since it doesn't exist as a metafield type\n// https://shopify.dev/docs/apps/custom-data/metafields/types\nconst uiTypesMap = new Map<string, string>([\n  ['boolean', 'checkbox'],\n  ['email', 'email'],\n  ['multi_line_text_field', 'text-multi-lines'],\n  ['number_integer', 'number'],\n  ['single_line_text_field', 'text-single-line'],\n  ['url', 'url'],\n])\n\nexport const serializeConfigField = (field: ConfigField, type: FlowExtensionTypes) => {\n  const uiType = uiTypesMap.get(field.type)\n\n  if (typeof field.key !== 'string') {\n    throw new AbortError(`key property must be specified for non-commerce object fields in ${JSON.stringify(field)}`)\n  }\n\n  if (!uiType) {\n    throw new AbortError(`Field type ${field.type} is not supported`)\n  }\n\n  const serializedField: SerializedField = {\n    name: field.key,\n    description: field.description,\n    uiType,\n  }\n\n  if (type === 'flow_action') {\n    serializedField.label = field.name\n    serializedField.required = Boolean(field.required)\n  }\n\n  return serializedField\n}\n\nexport const serializeCommerceObjectField = (field: ConfigField, type: FlowExtensionTypes) => {\n  if (type === 'flow_trigger' && !TRIGGER_SUPPORTED_COMMERCE_OBJECTS.includes(field.type)) {\n    throw new AbortError(`Commerce object ${field.type} is not supported for Flow Triggers`)\n  }\n\n  if (type === 'flow_action' && !ACTION_SUPPORTED_COMMERCE_OBJECTS.includes(field.type)) {\n    throw new AbortError(`Commerce object ${field.type} is not supported for Flow Actions`)\n  }\n\n  const commerceObject = field.type.replace('_reference', '')\n\n  const serializedField: SerializedField = {\n    name: `${commerceObject}_id`,\n    uiType: type === 'flow_action' ? 'commerce-object-id' : commerceObject,\n  }\n\n  if (type === 'flow_action') {\n    serializedField.label = `${commerceObject.charAt(0).toUpperCase() + commerceObject.slice(1)} ID`\n    serializedField.required = Boolean(field.required)\n  }\n\n  return serializedField\n}\n\nexport const serializeFields = (type: FlowExtensionTypes, fields?: ConfigField[]) => {\n  if (!fields) return []\n\n  const serializedFields = fields.map((field) => {\n    if (Object.keys(SUPPORTED_COMMERCE_OBJECTS).includes(field.type)) {\n      return serializeCommerceObjectField(field, type)\n    }\n\n    return serializeConfigField(field, type)\n  })\n\n  return serializedFields\n}\n"]}