{"version":3,"file":"flow_trigger.js","sourceRoot":"","sources":["../../../../../src/cli/models/extensions/specifications/flow_trigger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAA;AACxC,OAAO,EAAC,4BAA4B,EAAC,MAAM,qBAAqB,CAAA;AAChE,OAAO,EAAC,8BAA8B,EAAC,MAAM,sCAAsC,CAAA;AACnF,OAAO,EAAC,eAAe,EAAC,MAAM,2CAA2C,CAAA;AACzE,OAAO,EAAC,GAAG,EAAC,MAAM,8BAA8B,CAAA;AAEhD,MAAM,0BAA0B,GAAG,UAAU,CAAC,MAAM,CAAC;IACnD,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE;IAClB,WAAW,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACpC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC;IACjC,UAAU,EAAE,GAAG;SACZ,KAAK,CACJ,GAAG,CAAC,MAAM,CAAC;QACT,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC;QACjC,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;QAC/B,eAAe,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;KACzC,CAAC,CACH;SACA,GAAG,CAAC,CAAC,CAAC;IACT,QAAQ,EAAE,GAAG;SACV,MAAM,CAAC;QACN,MAAM,EAAE,GAAG;aACR,KAAK,CACJ,GAAG;aACA,MAAM,CAAC;YACN,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;YAC5B,WAAW,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;YACpC,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE;SACnB,CAAC;aACD,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,8BAA8B,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC,CAC5E;aACA,QAAQ,EAAE;KACd,CAAC;SACD,QAAQ,EAAE;CACd,CAAC,CAAA;AAEF;;GAEG;AACH,MAAM,wBAAwB,GAAG,4BAA4B,CAAC;IAC5D,UAAU,EAAE,cAAc;IAC1B,MAAM,EAAE,0BAA0B;IAClC,eAAe,EAAE,KAAK;IACtB,iBAAiB,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;IAC5B,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE;QAC7B,MAAM,EAAC,UAAU,EAAC,GAAG,MAAM,CAAA;QAC3B,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAE,CAAA;QAEhC,OAAO;YACL,KAAK,EAAE,MAAM,CAAC,IAAI;YAClB,WAAW,EAAE,MAAM,CAAC,WAAW;YAC/B,MAAM,EAAE,eAAe,CAAC,cAAc,EAAE,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC;YAChE,MAAM,EAAE,SAAS,CAAC,MAAM;YACxB,eAAe,EAAE,SAAS,CAAC,eAAe;SAC3C,CAAA;IACH,CAAC;CACF,CAAC,CAAA;AAEF,eAAe,wBAAwB,CAAA","sourcesContent":["import {BaseSchema} from '../schemas.js'\nimport {createExtensionSpecification} from '../specification.js'\nimport {validateNonCommerceObjectShape} from '../../../services/flow/validation.js'\nimport {serializeFields} from '../../../services/flow/serializeFields.js'\nimport {zod} from '@shopify/cli-kit/node/schema'\n\nconst FlowTriggerExtensionSchema = BaseSchema.extend({\n  name: zod.string(),\n  description: zod.string().optional(),\n  type: zod.literal('flow_trigger'),\n  extensions: zod\n    .array(\n      zod.object({\n        type: zod.literal('flow_trigger'),\n        schema: zod.string().optional(),\n        return_type_ref: zod.string().optional(),\n      }),\n    )\n    .min(1),\n  settings: zod\n    .object({\n      fields: zod\n        .array(\n          zod\n            .object({\n              key: zod.string().optional(),\n              description: zod.string().optional(),\n              type: zod.string(),\n            })\n            .refine((field) => validateNonCommerceObjectShape(field, 'flow_trigger')),\n        )\n        .optional(),\n    })\n    .optional(),\n})\n\n/**\n * Extension specification with all properties and methods needed to load a Flow Trigger.\n */\nconst flowTriggerSpecification = createExtensionSpecification({\n  identifier: 'flow_trigger',\n  schema: FlowTriggerExtensionSchema,\n  singleEntryPath: false,\n  appModuleFeatures: (_) => [],\n  deployConfig: async (config) => {\n    const {extensions} = config\n    const extension = extensions[0]!\n\n    return {\n      title: config.name,\n      description: config.description,\n      fields: serializeFields('flow_trigger', config.settings?.fields),\n      schema: extension.schema,\n      return_type_ref: extension.return_type_ref,\n    }\n  },\n})\n\nexport default flowTriggerSpecification\n"]}