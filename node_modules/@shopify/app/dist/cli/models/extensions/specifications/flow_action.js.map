{"version":3,"file":"flow_action.js","sourceRoot":"","sources":["../../../../../src/cli/models/extensions/specifications/flow_action.ts"],"names":[],"mappings":"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","sourcesContent":["import {BaseSchema} from '../schemas.js'\nimport {createExtensionSpecification} from '../specification.js'\nimport {\n  validateNonCommerceObjectShape,\n  startsWithHttps,\n  validateCustomConfigurationPageConfig,\n} from '../../../services/flow/validation.js'\nimport {serializeFields} from '../../../services/flow/serializeFields.js'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {glob, readFile} from '@shopify/cli-kit/node/fs'\nimport {zod} from '@shopify/cli-kit/node/schema'\n\nconst FlowActionExtensionSchema = BaseSchema.extend({\n  name: zod.string(),\n  description: zod.string().optional(),\n  type: zod.literal('flow_action'),\n  extensions: zod\n    .array(\n      zod.object({\n        type: zod.literal('flow_action'),\n        runtime_url: zod.string().url().refine(startsWithHttps),\n        validation_url: zod.string().url().refine(startsWithHttps).optional(),\n        config_page_url: zod.string().url().refine(startsWithHttps).optional(),\n        config_page_preview_url: zod.string().url().refine(startsWithHttps).optional(),\n        schema: zod.string().optional(),\n        return_type_ref: zod.string().optional(),\n      }),\n    )\n    .min(1),\n  settings: zod\n    .object({\n      fields: zod\n        .array(\n          zod\n            .object({\n              key: zod.string().optional(),\n              name: zod.string().optional(),\n              description: zod.string().optional(),\n              required: zod.boolean().optional(),\n              type: zod.string(),\n            })\n            .refine((field) => validateNonCommerceObjectShape(field, 'flow_action')),\n        )\n        .optional(),\n    })\n    .optional(),\n}).refine((config) => {\n  const {extensions} = config\n  const extension = extensions[0]!\n\n  return validateCustomConfigurationPageConfig(\n    extension.config_page_url,\n    extension.config_page_preview_url,\n    extension.validation_url,\n  )\n})\n\n/**\n * Loads the schema from the partner defined file.\n */\nconst loadSchemaPatchFromPath = async (extensionPath: string, patchPath: string | undefined) => {\n  if (!patchPath) {\n    return ''\n  }\n\n  const path = await glob(joinPath(extensionPath, patchPath))\n\n  if (path.length > 1) {\n    throw new Error('Multiple files found for schema patch path')\n  } else if (path.length === 0) {\n    return ''\n  }\n\n  return readFile(path[0] as string)\n}\n\n/**\n * Extension specification with all properties and methods needed to load a Flow Action.\n */\nconst flowActionSpecification = createExtensionSpecification({\n  identifier: 'flow_action',\n  schema: FlowActionExtensionSchema,\n  singleEntryPath: false,\n  appModuleFeatures: (_) => [],\n  deployConfig: async (config) => {\n    const {extensions} = config\n    const extension = extensions[0]!\n\n    return {\n      title: config.name,\n      description: config.description,\n      url: extension.runtime_url,\n      fields: serializeFields('flow_action', config.settings?.fields),\n      validation_url: extension.validation_url,\n      custom_configuration_page_url: extension.config_page_url,\n      custom_configuration_page_preview_url: extension.config_page_preview_url,\n      schema: extension.schema,\n      return_type_ref: extension.return_type_ref,\n    }\n  },\n})\n\nexport default flowActionSpecification\n"]}