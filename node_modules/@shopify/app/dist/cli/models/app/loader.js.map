{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../../../src/cli/models/app/loader.ts"],"names":[],"mappings":"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","sourcesContent":["import {AppConfigurationSchema, Web, WebConfigurationSchema, App, AppInterface, WebType} from './app.js'\nimport {configurationFileNames, dotEnvFileNames} from '../../constants.js'\nimport metadata from '../../metadata.js'\nimport {ExtensionInstance} from '../extensions/extension-instance.js'\nimport {TypeSchema} from '../extensions/schemas.js'\nimport {ExtensionSpecification} from '../extensions/specification.js'\nimport {zod} from '@shopify/cli-kit/node/schema'\nimport {fileExists, readFile, glob, findPathUp} from '@shopify/cli-kit/node/fs'\nimport {readAndParseDotEnv, DotEnvFile} from '@shopify/cli-kit/node/dot-env'\nimport {\n  getDependencies,\n  getPackageManager,\n  getPackageName,\n  usesWorkspaces as appUsesWorkspaces,\n} from '@shopify/cli-kit/node/node-package-manager'\nimport {resolveFramework} from '@shopify/cli-kit/node/framework'\nimport {getArrayRejectingUndefined} from '@shopify/cli-kit/common/array'\nimport {hashString} from '@shopify/cli-kit/node/crypto'\nimport {decodeToml} from '@shopify/cli-kit/node/toml'\nimport {isShopify} from '@shopify/cli-kit/node/context/local'\nimport {joinPath, dirname, basename} from '@shopify/cli-kit/node/path'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {outputContent, outputDebug, OutputMessage, outputToken} from '@shopify/cli-kit/node/output'\n\nconst defaultExtensionDirectory = 'extensions/*'\n\nexport type AppLoaderMode = 'strict' | 'report'\n\ntype AbortOrReport = <T>(errorMessage: OutputMessage, fallback: T, configurationPath: string) => T\n\nasync function loadConfigurationFile(\n  filepath: string,\n  abortOrReport: AbortOrReport,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  decode: (input: any) => any = decodeToml,\n): Promise<unknown> {\n  if (!(await fileExists(filepath))) {\n    return abortOrReport(\n      outputContent`Couldn't find the configuration file at ${outputToken.path(filepath)}`,\n      '',\n      filepath,\n    )\n  }\n\n  try {\n    const configurationContent = await readFile(filepath)\n    return decode(configurationContent)\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (err: any) {\n    // TOML errors have line, pos and col properties\n    if (err.line && err.pos && err.col) {\n      return abortOrReport(\n        outputContent`Fix the following error in ${outputToken.path(filepath)}:\\n${err.message}`,\n        null,\n        filepath,\n      )\n    } else {\n      throw err\n    }\n  }\n}\n\nexport async function parseConfigurationFile<TSchema extends zod.ZodType>(\n  schema: TSchema,\n  filepath: string,\n  abortOrReport: AbortOrReport,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  decode: (input: any) => any = decodeToml,\n): Promise<zod.TypeOf<TSchema>> {\n  const fallbackOutput = {} as zod.TypeOf<TSchema>\n\n  const configurationObject = await loadConfigurationFile(filepath, abortOrReport, decode)\n  if (!configurationObject) return fallbackOutput\n\n  const parseResult = schema.safeParse(configurationObject)\n\n  if (!parseResult.success) {\n    const formattedError = JSON.stringify(parseResult.error.issues, null, 2)\n    return abortOrReport(\n      outputContent`Fix a schema error in ${outputToken.path(filepath)}:\\n${formattedError}`,\n      fallbackOutput,\n      filepath,\n    )\n  }\n  return parseResult.data\n}\n\nexport function findSpecificationForType(specifications: ExtensionSpecification[], type: string) {\n  return specifications.find(\n    (spec) =>\n      spec.identifier === type || spec.externalIdentifier === type || spec.additionalIdentifiers?.includes(type),\n  )\n}\n\nexport async function findSpecificationForConfig(\n  specifications: ExtensionSpecification[],\n  configurationPath: string,\n  abortOrReport: AbortOrReport,\n) {\n  const fileContent = await readFile(configurationPath)\n  const obj = decodeToml(fileContent)\n  const {type} = TypeSchema.parse(obj)\n  const specification = findSpecificationForType(specifications, type)\n\n  if (!specification) {\n    const isShopifolk = await isShopify()\n    const shopifolkMessage = '\\nYou might need to enable some beta flags on your Organization or App'\n    abortOrReport(\n      outputContent`Unknown extension type ${outputToken.yellow(type)} in ${outputToken.path(configurationPath)}. ${\n        isShopifolk ? shopifolkMessage : ''\n      }`,\n      undefined,\n      configurationPath,\n    )\n    return undefined\n  }\n\n  return specification\n}\n\nexport class AppErrors {\n  private errors: {\n    [key: string]: OutputMessage\n  } = {}\n\n  addError(path: string, message: OutputMessage): void {\n    this.errors[path] = message\n  }\n\n  getError(path: string) {\n    return this.errors[path]\n  }\n\n  isEmpty() {\n    return Object.keys(this.errors).length === 0\n  }\n\n  toJSON(): OutputMessage[] {\n    return Object.values(this.errors)\n  }\n}\n\ninterface AppLoaderConstructorArgs {\n  directory: string\n  mode?: AppLoaderMode\n  configName?: string\n  specifications: ExtensionSpecification[]\n}\n\n/**\n * Load the local app from the given directory and using the provided extensions/functions specifications.\n * If the App contains extensions not supported by the current specs and mode is strict, it will throw an error.\n */\nexport async function load(options: AppLoaderConstructorArgs): Promise<AppInterface> {\n  const loader = new AppLoader(options)\n  return loader.loaded()\n}\n\nclass AppLoader {\n  private directory: string\n  private mode: AppLoaderMode\n  private configName?: string\n  private appDirectory = ''\n  private configurationPath = ''\n  private errors: AppErrors = new AppErrors()\n  private specifications: ExtensionSpecification[]\n\n  constructor({directory, configName, mode, specifications}: AppLoaderConstructorArgs) {\n    this.mode = mode ?? 'strict'\n    this.directory = directory\n    this.specifications = specifications\n    this.configName = configName\n  }\n\n  findSpecificationForType(type: string) {\n    return findSpecificationForType(this.specifications, type)\n  }\n\n  parseConfigurationFile<TSchema extends zod.ZodType>(\n    schema: TSchema,\n    filepath: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    decode: (input: any) => any = decodeToml,\n  ) {\n    return parseConfigurationFile(schema, filepath, this.abortOrReport.bind(this), decode)\n  }\n\n  async loaded() {\n    this.appDirectory = await this.findAppDirectory()\n    const configurationPath = await this.getConfigurationPath()\n    const configuration = await this.parseConfigurationFile(AppConfigurationSchema, configurationPath)\n    const dotenv = await this.loadDotEnv()\n\n    const {allExtensions, usedCustomLayout} = await this.loadExtensions(configuration.extension_directories)\n\n    const packageJSONPath = joinPath(this.appDirectory, 'package.json')\n    const name = await loadAppName(this.appDirectory)\n    const nodeDependencies = await getDependencies(packageJSONPath)\n    const packageManager = await getPackageManager(this.appDirectory)\n    const {webs, usedCustomLayout: usedCustomLayoutForWeb} = await this.loadWebs(configuration.web_directories)\n    const usesWorkspaces = await appUsesWorkspaces(this.appDirectory)\n\n    const appClass = new App(\n      name,\n      'SHOPIFY_API_KEY',\n      this.appDirectory,\n      packageManager,\n      configuration,\n      configurationPath,\n      nodeDependencies,\n      webs,\n      allExtensions,\n      usesWorkspaces,\n      dotenv,\n    )\n\n    if (!this.errors.isEmpty()) appClass.errors = this.errors\n\n    await logMetadataForLoadedApp(appClass, {\n      usedCustomLayoutForWeb,\n      usedCustomLayoutForExtensions: usedCustomLayout,\n    })\n\n    return appClass\n  }\n\n  async loadDotEnv(): Promise<DotEnvFile | undefined> {\n    let dotEnvFile: DotEnvFile | undefined\n    const dotEnvPath = joinPath(this.appDirectory, dotEnvFileNames.production)\n    if (await fileExists(dotEnvPath)) {\n      dotEnvFile = await readAndParseDotEnv(dotEnvPath)\n    }\n    return dotEnvFile\n  }\n\n  async findAppDirectory() {\n    if (!(await fileExists(this.directory))) {\n      throw new AbortError(outputContent`Couldn't find directory ${outputToken.path(this.directory)}`)\n    }\n    return dirname(await this.getConfigurationPath())\n  }\n\n  async getConfigurationPath() {\n    if (this.configurationPath) return this.configurationPath\n\n    const configurationFileName = getAppConfigurationFileName(this.configName)\n    const configurationPath = await findPathUp(configurationFileName, {\n      cwd: this.directory,\n      type: 'file',\n    })\n    if (!configurationPath) {\n      throw new AbortError(\n        outputContent`Couldn't find the configuration file for ${outputToken.path(\n          this.directory,\n        )}, are you in an app directory?`,\n      )\n    }\n\n    this.configurationPath = configurationPath\n    return configurationPath\n  }\n\n  async loadWebs(webDirectories?: string[]): Promise<{webs: Web[]; usedCustomLayout: boolean}> {\n    const defaultWebDirectory = '**'\n    const webConfigGlobs = [...(webDirectories ?? [defaultWebDirectory])].map((webGlob) => {\n      return joinPath(this.appDirectory, webGlob, configurationFileNames.web)\n    })\n    webConfigGlobs.push(`!${joinPath(this.appDirectory, '**/node_modules/**')}`)\n    const webTomlPaths = await glob(webConfigGlobs)\n\n    const webs = await Promise.all(webTomlPaths.map((path) => this.loadWeb(path)))\n    this.validateWebs(webs)\n\n    const webTomlsInStandardLocation = await glob(joinPath(this.appDirectory, `web/**/${configurationFileNames.web}`))\n    const usedCustomLayout = webDirectories !== undefined || webTomlsInStandardLocation.length !== webTomlPaths.length\n\n    return {webs, usedCustomLayout}\n  }\n\n  validateWebs(webs: Web[]): void {\n    ;[WebType.Backend, WebType.Frontend].forEach((webType) => {\n      const websOfType = webs.filter((web) => web.configuration.roles.includes(webType))\n      if (websOfType.length > 1) {\n        this.abortOrReport(\n          outputContent`You can only have one web with the ${outputToken.yellow(webType)} role in your app`,\n          undefined,\n          joinPath(websOfType[1]!.directory, configurationFileNames.web),\n        )\n      }\n    })\n  }\n\n  async loadWeb(WebConfigurationFile: string): Promise<Web> {\n    const config = await this.parseConfigurationFile(WebConfigurationSchema, WebConfigurationFile)\n    const roles = new Set('roles' in config ? config.roles : [])\n    if ('type' in config) roles.add(config.type)\n    const {type, ...processedWebConfiguration} = {...config, roles: Array.from(roles), type: undefined}\n    return {\n      directory: dirname(WebConfigurationFile),\n      configuration: processedWebConfiguration,\n      framework: await resolveFramework(dirname(WebConfigurationFile)),\n    }\n  }\n\n  async loadExtensions(\n    extensionDirectories?: string[],\n  ): Promise<{allExtensions: ExtensionInstance[]; usedCustomLayout: boolean}> {\n    const extensionConfigPaths = [...(extensionDirectories ?? [defaultExtensionDirectory])].map((extensionPath) => {\n      return joinPath(this.appDirectory, extensionPath, '*.extension.toml')\n    })\n    extensionConfigPaths.push(`!${joinPath(this.appDirectory, '**/node_modules/**')}`)\n    const configPaths = await glob(extensionConfigPaths)\n\n    const extensions = configPaths.map(async (configurationPath) => {\n      const directory = dirname(configurationPath)\n      const specification = await findSpecificationForConfig(\n        this.specifications,\n        configurationPath,\n        this.abortOrReport.bind(this),\n      )\n\n      if (!specification) return\n\n      const configuration = await this.parseConfigurationFile(specification.schema, configurationPath)\n      const entryPath = await this.findEntryPath(directory, specification)\n\n      const extensionInstance = new ExtensionInstance({\n        configuration,\n        configurationPath,\n        entryPath,\n        directory,\n        specification,\n      })\n\n      const validateResult = await extensionInstance.validate()\n      if (validateResult.isErr()) {\n        this.abortOrReport(outputContent`\\n${validateResult.error}`, undefined, configurationPath)\n      }\n\n      return extensionInstance\n    })\n\n    const allExtensions = getArrayRejectingUndefined(await Promise.all(extensions))\n    return {allExtensions, usedCustomLayout: extensionDirectories !== undefined}\n  }\n\n  async findEntryPath(directory: string, specification: ExtensionSpecification) {\n    let entryPath\n    if (specification.singleEntryPath) {\n      entryPath = (\n        await Promise.all(\n          ['index']\n            .flatMap((name) => [`${name}.js`, `${name}.jsx`, `${name}.ts`, `${name}.tsx`])\n            .flatMap((fileName) => [`src/${fileName}`, `${fileName}`])\n            .map((relativePath) => joinPath(directory, relativePath))\n            .map(async (sourcePath) => ((await fileExists(sourcePath)) ? sourcePath : undefined)),\n        )\n      ).find((sourcePath) => sourcePath !== undefined)\n      if (!entryPath) {\n        this.abortOrReport(\n          outputContent`Couldn't find an index.{js,jsx,ts,tsx} file in the directories ${outputToken.path(\n            directory,\n          )} or ${outputToken.path(joinPath(directory, 'src'))}`,\n          undefined,\n          directory,\n        )\n      }\n    } else if (specification.identifier === 'function') {\n      entryPath = (\n        await Promise.all(\n          ['src/index.js', 'src/index.ts', 'src/main.rs']\n            .map((relativePath) => joinPath(directory, relativePath))\n            .map(async (sourcePath) => ((await fileExists(sourcePath)) ? sourcePath : undefined)),\n        )\n      ).find((sourcePath) => sourcePath !== undefined)\n    }\n    return entryPath\n  }\n\n  abortOrReport<T>(errorMessage: OutputMessage, fallback: T, configurationPath: string): T {\n    if (this.mode === 'strict') {\n      throw new AbortError(errorMessage)\n    } else {\n      this.errors.addError(configurationPath, errorMessage)\n      return fallback\n    }\n  }\n}\n\nexport async function loadAppName(appDirectory: string): Promise<string> {\n  const packageJSONPath = joinPath(appDirectory, 'package.json')\n  return (await getPackageName(packageJSONPath)) ?? basename(appDirectory)\n}\n\nasync function getProjectType(webs: Web[]): Promise<'node' | 'php' | 'ruby' | 'frontend' | undefined> {\n  const backendWebs = webs.filter((web) => isWebType(web, WebType.Backend))\n  const frontendWebs = webs.filter((web) => isWebType(web, WebType.Frontend))\n  if (backendWebs.length > 1) {\n    outputDebug('Unable to decide project type as multiple web backends')\n    return\n  } else if (backendWebs.length === 0 && frontendWebs.length > 0) {\n    return 'frontend'\n  } else if (backendWebs.length === 0) {\n    outputDebug('Unable to decide project type as no web backend')\n    return\n  }\n  const {directory} = backendWebs[0]!\n\n  const nodeConfigFile = joinPath(directory, 'package.json')\n  const rubyConfigFile = joinPath(directory, 'Gemfile')\n  const phpConfigFile = joinPath(directory, 'composer.json')\n\n  if (await fileExists(nodeConfigFile)) {\n    return 'node'\n  } else if (await fileExists(rubyConfigFile)) {\n    return 'ruby'\n  } else if (await fileExists(phpConfigFile)) {\n    return 'php'\n  }\n  return undefined\n}\n\nfunction isWebType(web: Web, type: WebType): boolean {\n  return web.configuration.roles.includes(type)\n}\n\nasync function logMetadataForLoadedApp(\n  app: App,\n  loadingStrategy: {\n    usedCustomLayoutForWeb: boolean\n    usedCustomLayoutForExtensions: boolean\n  },\n) {\n  await metadata.addPublicMetadata(async () => {\n    const projectType = await getProjectType(app.webs)\n\n    const extensionFunctionCount = app.allExtensions.filter((extension) => extension.isFunctionExtension).length\n    const extensionUICount = app.allExtensions.filter((extension) => extension.isESBuildExtension).length\n    const extensionThemeCount = app.allExtensions.filter((extension) => extension.isThemeExtension).length\n\n    const extensionTotalCount = app.allExtensions.length\n\n    const webBackendCount = app.webs.filter((web) => isWebType(web, WebType.Backend)).length\n    const webBackendFramework =\n      webBackendCount === 1 ? app.webs.filter((web) => isWebType(web, WebType.Backend))[0]?.framework : undefined\n    const webFrontendCount = app.webs.filter((web) => isWebType(web, WebType.Frontend)).length\n\n    const extensionsBreakdownMapping: {[key: string]: number} = {}\n    for (const extension of app.allExtensions) {\n      if (extensionsBreakdownMapping[extension.type] === undefined) {\n        extensionsBreakdownMapping[extension.type] = 1\n      } else {\n        extensionsBreakdownMapping[extension.type]++\n      }\n    }\n\n    return {\n      project_type: projectType,\n      app_extensions_any: extensionTotalCount > 0,\n      app_extensions_breakdown: JSON.stringify(extensionsBreakdownMapping),\n      app_extensions_count: extensionTotalCount,\n      app_extensions_custom_layout: loadingStrategy.usedCustomLayoutForExtensions,\n      app_extensions_function_any: extensionFunctionCount > 0,\n      app_extensions_function_count: extensionFunctionCount,\n      app_extensions_theme_any: extensionThemeCount > 0,\n      app_extensions_theme_count: extensionThemeCount,\n      app_extensions_ui_any: extensionUICount > 0,\n      app_extensions_ui_count: extensionUICount,\n      app_name_hash: hashString(app.name),\n      app_path_hash: hashString(app.directory),\n      app_scopes: JSON.stringify(\n        app.configuration.scopes\n          .split(',')\n          .map((scope) => scope.trim())\n          .sort(),\n      ),\n      app_web_backend_any: webBackendCount > 0,\n      app_web_backend_count: webBackendCount,\n      app_web_custom_layout: loadingStrategy.usedCustomLayoutForWeb,\n      app_web_framework: webBackendFramework,\n      app_web_frontend_any: webFrontendCount > 0,\n      app_web_frontend_count: webFrontendCount,\n      env_package_manager_workspaces: app.usesWorkspaces,\n    }\n  })\n\n  await metadata.addSensitiveMetadata(async () => {\n    return {\n      app_name: app.name,\n    }\n  })\n}\n\nexport function getAppConfigurationFileName(config?: string) {\n  if (config) {\n    const validFileRegex = /^shopify\\.app(\\.\\w+)?\\.toml$/g\n    if (validFileRegex.test(config)) {\n      return config\n    }\n\n    return `shopify.app.${config}.toml`\n  }\n\n  return configurationFileNames.app\n}\n"]}